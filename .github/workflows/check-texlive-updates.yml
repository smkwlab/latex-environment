---
name: Check TeXLive Updates

# This workflow requires a Personal Access Token with 'repo' and 'workflow' scopes
# to update workflow files. Set it as WORKFLOW_UPDATE_TOKEN secret in repository settings.
# Without this token, only devcontainer.json will be updated.

on:
  schedule:
    # Run daily at 23:00 UTC (8:00 JST)
    - cron: '0 23 * * *'
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  check-updates:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.WORKFLOW_UPDATE_TOKEN || github.token }}

      - name: Check API rate limit
        run: |
          echo "Checking GitHub API rate limit..."
          REMAINING=$(gh api rate_limit --jq '.rate.remaining')
          RESET_TIME=$(gh api rate_limit --jq '.rate.reset')
          echo "API calls remaining: $REMAINING"

          if [ "$REMAINING" -lt 50 ]; then
            echo "Warning: GitHub API rate limit is low (remaining: $REMAINING)"
            echo "Rate limit resets at: $(date -d @$RESET_TIME)"
            if [ "$REMAINING" -lt 10 ]; then
              echo "Error: GitHub API rate limit nearly exceeded. Exiting to prevent failures."
              exit 1
            fi
          fi
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Check for new texlive-ja-textlint releases
        id: check
        run: |
          # Get the latest tag from texlive-ja-textlint using GitHub API
          echo "Fetching latest tag from texlive-ja-textlint..."

          # Get all tags and find the latest semantically with input validation
          echo "Fetching tags from GitHub API..."
          TAGS_RESPONSE=$(gh api repos/smkwlab/texlive-ja-textlint/tags --paginate)

          # Validate API response
          if ! echo "$TAGS_RESPONSE" | jq empty 2>/dev/null; then
            echo "Error: Invalid JSON response from GitHub API"
            exit 1
          fi

          # Extract and validate tags
          TAGS_JSON=$(echo "$TAGS_RESPONSE" | jq -r '.[] | select(.name | test("^[0-9]{4}[a-z]*$")) | .name' | head -10)

          # Validate that we got some tags
          if [ -z "$TAGS_JSON" ]; then
            echo "Error: No valid tags found in API response"
            exit 1
          fi

          # Sort tags by semantic versioning logic (year first, then letter suffix)
          LATEST_TAG=""
          for tag in $TAGS_JSON; do
            echo "Checking tag: $tag"

            # Enhanced input validation for tag format
            if [[ ! "$tag" =~ ^[0-9]{4}[a-z]*$ ]]; then
              echo "Warning: Invalid tag format detected, skipping: $tag" >&2
              continue
            fi

            # Validate tag length (prevent excessively long input)
            if [ ${#tag} -gt 10 ]; then
              echo "Warning: Tag too long, skipping: $tag" >&2
              continue
            fi

            # Extract year and suffix (e.g., 2025c -> year=2025, suffix=c)
            YEAR=$(echo "$tag" | grep -oE '^[0-9]{4}')
            SUFFIX=$(echo "$tag" | grep -oE '[a-z]*$')

            # Validate extracted components
            if [ -z "$YEAR" ] || [ ${#YEAR} -ne 4 ]; then
              echo "Warning: Invalid year in tag, skipping: $tag" >&2
              continue
            fi

            if [ -z "$LATEST_TAG" ]; then
              LATEST_TAG="$tag"
              continue
            fi

            # Compare with current latest
            LATEST_YEAR=$(echo "$LATEST_TAG" | grep -oE '^[0-9]{4}')
            LATEST_SUFFIX=$(echo "$LATEST_TAG" | grep -oE '[a-z]*$')

            # Compare year first
            if [ "$YEAR" -gt "$LATEST_YEAR" ]; then
              LATEST_TAG="$tag"
            elif [ "$YEAR" -eq "$LATEST_YEAR" ]; then
              # Same year, compare suffix (later alphabet = newer)
              if [ -z "$SUFFIX" ] && [ -n "$LATEST_SUFFIX" ]; then
                # Current tag has no suffix, latest has suffix -> latest is newer
                continue
              elif [ -n "$SUFFIX" ] && [ -z "$LATEST_SUFFIX" ]; then
                # Current tag has suffix, latest has no suffix -> current is newer
                LATEST_TAG="$tag"
              elif [ -n "$SUFFIX" ] && [ -n "$LATEST_SUFFIX" ]; then
                # Both have suffix, compare alphabetically
                if [ "$SUFFIX" \> "$LATEST_SUFFIX" ]; then
                  LATEST_TAG="$tag"
                fi
              fi
            fi
          done

          if [ -z "$LATEST_TAG" ]; then
            echo "Failed to determine latest tag"
            exit 1
          fi

          echo "Latest texlive-ja-textlint tag: $LATEST_TAG"
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT

          # Get current version from devcontainer.json using secure parsing
          if [ ! -f ".devcontainer/devcontainer.json" ]; then
            echo "Error: devcontainer.json not found"
            exit 1
          fi

          # Validate JSON format first
          if ! jq empty .devcontainer/devcontainer.json 2>/dev/null; then
            echo "Error: Invalid JSON format in devcontainer.json"
            exit 1
          fi

          # Extract version using jq for safer parsing
          CURRENT_VERSION=$(jq -r '.image // empty' .devcontainer/devcontainer.json | \
            sed -n 's/.*texlive-ja-textlint://p' | head -1)

          # Validate extracted version
          if [ -z "$CURRENT_VERSION" ]; then
            echo "Error: Could not extract current version from devcontainer.json"
            exit 1
          fi

          # Validate version format
          if [[ ! "$CURRENT_VERSION" =~ ^[0-9]{4}[a-z]*$ ]]; then
            echo "Error: Invalid current version format: $CURRENT_VERSION"
            exit 1
          fi

          echo "Current version in devcontainer.json: $CURRENT_VERSION"
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

          # Check if update is needed
          if [ "$LATEST_TAG" != "$CURRENT_VERSION" ]; then
            echo "Update needed: $CURRENT_VERSION -> $LATEST_TAG"
            echo "update_needed=true" >> $GITHUB_OUTPUT
          else
            echo "No update needed"
            echo "update_needed=false" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Create update branch
        if: steps.check.outputs.update_needed == 'true'
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

          # Remove 'v' prefix if present
          TAG_NAME="${{ steps.check.outputs.latest_tag }}"
          CLEAN_TAG="${TAG_NAME#v}"

          # Use version-based branch name (no timestamp to prevent duplicates)
          BRANCH_NAME="update-texlive-${CLEAN_TAG}"

          # Fetch latest remote branches to ensure accurate checking
          git fetch origin --prune

          # Check if branch exists locally or remotely
          LOCAL_BRANCH=$(git branch --list "$BRANCH_NAME" | head -1)
          REMOTE_BRANCH=$(git ls-remote --heads origin "$BRANCH_NAME" | head -1)

          # Secure PR search with error handling
          EXISTING_PR=""
          if PR_SEARCH_RESULT=$(gh pr list --state open \
            --search "Update texlive-ja-textlint to ${TAG_NAME}" \
            --json number 2>/dev/null); then

            # Validate PR search response
            if echo "$PR_SEARCH_RESULT" | jq empty 2>/dev/null; then
              EXISTING_PR=$(echo "$PR_SEARCH_RESULT" | jq -r '.[0].number // empty')
            else
              echo "Warning: Invalid JSON response from PR search, continuing..."
            fi
          else
            echo "Warning: PR search failed, continuing with branch check only"
          fi

          if [ -n "$LOCAL_BRANCH" ] || [ -n "$REMOTE_BRANCH" ] || [ -n "$EXISTING_PR" ]; then
            echo "Update already in progress:"
            [ -n "$LOCAL_BRANCH" ] && echo "  - Local branch exists: $BRANCH_NAME"
            [ -n "$REMOTE_BRANCH" ] && echo "  - Remote branch exists: $BRANCH_NAME"
            [ -n "$EXISTING_PR" ] && echo "  - PR exists: #$EXISTING_PR"
            echo "Skipping duplicate update."
            echo "update_needed=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Clean up any existing local branch before creating new one
          if git show-ref --verify --quiet "refs/heads/$BRANCH_NAME"; then
            echo "Cleaning up existing local branch: $BRANCH_NAME"
            git branch -D "$BRANCH_NAME"
          fi

          git checkout -b "$BRANCH_NAME"
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_ENV

      - name: Update all texlive-ja-textlint references
        if: steps.check.outputs.update_needed == 'true'
        run: |
          # Update the image version in devcontainer.json
          sed -i 's|"image": "ghcr.io/smkwlab/texlive-ja-textlint:[^"]*"|\
            "image": "ghcr.io/smkwlab/texlive-ja-textlint:${{ steps.check.outputs.latest_tag }}"|' \
            .devcontainer/devcontainer.json

          # Update the container image in workflow files (now using docker run instead of container mode)
          find .github/workflows -name "*.yml" -o -name "*.yaml" -print0 | \
            xargs -0 sed -i 's|ghcr.io/smkwlab/texlive-ja-textlint:[^[:space:]]*|\
            ghcr.io/smkwlab/texlive-ja-textlint:${{ steps.check.outputs.latest_tag }}|g'

          # Commit the changes
          git add .devcontainer/devcontainer.json .github/workflows/
          git commit -m "Update texlive-ja-textlint to ${{ steps.check.outputs.latest_tag }}

          - Update devcontainer.json image reference
          - Update workflow container images for consistency"

      - name: Push changes
        if: steps.check.outputs.update_needed == 'true'
        run: |
          # Force push in case branch somehow exists
          git push origin "${{ env.branch_name }}" --force

      - name: Create Pull Request
        if: steps.check.outputs.update_needed == 'true'
        run: |
          PR_BODY=$(cat <<'EOF'
          ## Automated Dependency Update

          This PR updates the texlive-ja-textlint Docker image from
          \`${{ steps.check.outputs.current_version }}\` to \`${{ steps.check.outputs.latest_tag }}\`.

          ### Changes
          - Updated `.devcontainer/devcontainer.json` to use the latest texlive-ja-textlint image
          - Updated GitHub Actions workflow container images for consistency

          ### Release Notes
          View [release notes](https://github.com/smkwlab/texlive-ja-textlint/releases/tag/
          ${{ steps.check.outputs.latest_tag }}) for details.

          ### Next Steps
          After merging this PR:
          1. Create a new release tag for latex-environment
          2. Update downstream dependencies:
             - [ ] aldc script version
             - [ ] Template repositories
             - [ ] Documentation

          ---
          *This PR was automatically created by the dependency update workflow.*
          EOF
          )

          gh pr create \
            --title "Update texlive-ja-textlint to ${{ steps.check.outputs.latest_tag }}" \
            --body "$PR_BODY" \
            --base main \
            --head "${{ env.branch_name }}"
        env:
          GH_TOKEN: ${{ secrets.WORKFLOW_UPDATE_TOKEN || github.token }}
